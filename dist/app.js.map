{"version":3,"sources":["../src/app.js"],"names":["app","use","disable","set","join","__dirname","skip","get","json","urlencoded","extended","static","req","res","data","status","getStatus","timer","console","log","render","next","reqHash","params","immun","Immun","findOne","where","hash","dataValues","immunitet","getImmunitet","title","antidot","infected","passport","secondname","firstname","birth","toLocaleString","year","month","day","faculty","group","organization","phone","passportTranslation","patronimyc","sendFile","root","err","Error","message"],"mappings":"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","file":"app.js","sourcesContent":["import express from 'express'\r\nimport path from 'path'\r\nimport logger from 'morgan'\r\nimport bodyParser from 'body-parser'\r\nimport cors from 'cors'\r\nimport db from './models/index'\r\nimport bot from './bot'\r\nimport { stat } from 'fs'\r\n\r\n\r\nconst app = express()\r\n\r\napp.use(cors())\r\napp.disable('x-powered-by')\r\n\r\n// View engine setup\r\napp.set('views', path.join(__dirname, '../views'))\r\napp.set('view engine', 'pug')\r\n\r\napp.use(logger('dev', {\r\n  skip: () => app.get('env') === 'test'\r\n}))\r\napp.use(bodyParser.json())\r\napp.use(bodyParser.urlencoded({ extended: false }))\r\napp.use(express.static(path.join(__dirname, '../public')))\r\napp.use(express.static(path.join(__dirname, '../docs')))\r\n\r\n\r\n\r\napp.get('/', async(req, res) => {\r\n  let data = {}\r\n  let status = await db.getStatus()\r\n  // let immunitet = await db.getAvgImmunitet()\r\n  data = {\r\n    // antidot: status.antidot,\r\n    // infected: status.infected,\r\n    timer: status.timer,\r\n    // immunitet: immunitet\r\n  }\r\n  console.log(data)\r\n  res.render('index', data)\r\n})\r\n\r\napp.get('/:hash', async (req, res, next) => {\r\n  const reqHash = req.params['hash']\r\n  req.params['hash'] == 'favicon.ico' ? next() : null\r\n  let immun = await db.Immun.findOne({\r\n    where: {\r\n      hash: req.params['hash']\r\n    }\r\n  })\r\n  console.log(immun)\r\n  immun = immun.dataValues\r\n  // console.log(immun)\r\n  let status = await db.getStatus()\r\n  let immunitet = await db.getImmunitet(req.params['hash'])\r\n  console.log(immunitet)\r\n  // app.get('/', async (req, res) => {\r\n  // let data = await db.Immun.findAll({\r\n  //   where: {\r\n  //     hash: req.params['hash']\r\n  //   }\r\n  // })\r\n\r\n  const data = {\r\n    title: 'ZU20',\r\n    // message: 'gnlkjf',\r\n    immunitet: immunitet,\r\n    antidot: status.antidot,\r\n    infected: status.infected,\r\n    timer: status.timer,\r\n    hash: immun.hash,\r\n    passport: {\r\n      secondname: immun.secondname,\r\n      firstname: immun.firstname,\r\n      birth: `${immun.birth.toLocaleString('ru', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      })}`,\r\n      faculty: immun.faculty,\r\n      group: immun.group,\r\n      organization: immun.organization,\r\n      phone: immun.phone\r\n    },\r\n    passportTranslation: {\r\n      secondname: 'Фамилия',\r\n      firstname: 'Имя',\r\n      patronimyc: 'Отчество',\r\n      birth: 'Дата рождения',\r\n      faculty: 'Область специализации',\r\n      group: 'Код специализации',\r\n      organization: 'Статус Н.И.М.Б.',\r\n      phone: 'Телефон'\r\n    }\r\n  }\r\n  console.log(data)\r\n  res.render('profile', data)\r\n  // res.render('index', { title: 'Hey', message: data[0].dataValues.secondname});\r\n})\r\n\r\n// const data = fs.readFileSync(path.join(__dirname, '../docs/users.csv'), 'utf8')\r\n// let genHash = new RandomHash({\r\n//   length: 6,\r\n//   charset: 'ABCDEFGHKLMNPQRSTUVXYZ0123456789',\r\n//   rng: randomBytes\r\n// })\r\n// let result = []\r\n// let hashedUsers = []\r\n// fs.createReadStream(path.join(__dirname, '../docs/users.csv'))\r\n//   .pipe(csvParser({\r\n//     separator: ';',\r\n//     headers: ['id', 'secondname', 'firstname', 'patronymic', 'birth', 'faculty', 'group', 'phone', 'organization' ]\r\n//   }))\r\n//   .on('data', (data) => result.push(data))\r\n//   .on('end', () => {\r\n//     // console.log(result);\r\n//     result.forEach(user => {\r\n//       // user.id = parseInt(user.id)\r\n//       delete user.id\r\n//       user.hash = genHash()\r\n//       hashedUsers.push(user)\r\n//       console.log(user)\r\n//     })\r\n//     db.User.bulkCreate(hashedUsers)\r\n//     // [\r\n//     //   { NAME: 'Daffy Duck', AGE: '24' },\r\n//     //   { NAME: 'Bugs Bunny', AGE: '22' }\r\n//     // ]\r\n//   });\r\n\r\n\r\n\r\n\r\n// console.log(hashedUsers)\r\n\r\n\r\n\r\n// db.User.bulkCreate()\r\n// const array = convertCSVToArray(data, {\r\n//   header: true,\r\n//   type: 'array',\r\n//   separator: ';', // use the separator you use in your csv (e.g. '\\t', ',', ';' ...)\r\n// });\r\n\r\n// console.log(array)\r\n\r\n  // columns: ['id', 'secondname', 'firstname', 'patronymic', 'birth', 'faculty', 'group', 'phone', 'organization' ]\r\n\r\napp.get('/docs/hash', (req, res, next) => {\r\n  res.sendFile(`hash.csv`, { root: path.join(__dirname, `../docs`) })\r\n})\r\napp.get('/docs/qrs', (req, res, next) => {\r\n  res.sendFile(`QRs.zip`, { root: path.join(__dirname, `../docs/qrs`) })\r\n})\r\n\r\n\r\n\r\n\r\n\r\n// app.get('/gethuy', (req, res, next) => {\r\n//   // res.sendFile('index.html', { root: path.join(__dirname, '../public') })\r\n//   res.json({ get: \"huy\" })\r\n// })\r\n\r\n\r\n\r\n// SEND SPA TO CLIENT + CLIENT ROUTING :)\r\n// app.get('*', (req, res, next) => {\r\n//   res.sendFile('index.html', { root: path.join(__dirname, '../public') })\r\n// })\r\n\r\n\r\n// Routes\r\n// app.use('/api/v1', routes)\r\n// app.use('/api', routes)\r\n// app.use('/api/v1/master', user)\r\n// app.use('/api/v1/request', request)\r\n\r\n// Catch 404 and forward to error handler\r\napp.use((req, res, next) => {\r\n  const err = new Error('Not Found')\r\n  err.status = 404\r\n  next(err)\r\n})\r\n\r\n// Error handler\r\napp.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\r\n  res\r\n    .status(err.status || 500)\r\n    .render('error', {\r\n      message: err.message\r\n    })\r\n})\r\n\r\nexport default app\r\n"]}