{"version":3,"sources":["../src/bot copy.js"],"names":["Telegraf","require","SocksAgent","BOT_TOKEN","PROXY_SOCKS5_HOST","PROXY_SOCKS5_PORT","PROXY_SOCKS5_USERNAME","PROXY_SOCKS5_PASSWORD","SECRET","process","env","socksAgent","bot","chatId","getStatus","settingsArray","Setting","findAll","settings","setting","dataValues","parameter","value","console","log","Error","setWarn","newWarn","hash","reason","options","fields","immun","Immun","findOne","where","iHash","warn","Warn","create","author","warnData","secondname","firstname","faculty","setParameter","newParameter","newValue","updatedSetting","update","agent","telegram","sendMessage","error","start","ctx","reply","help","command","message","text","split","undefined","updValue","from","parseInt","username","shift","join","antidot","infected","deadline","on","hears","launch","module","exports"],"mappings":"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","file":"bot copy.js","sourcesContent":["const Telegraf  = require('telegraf')\r\nconst SocksAgent = require('socks5-https-client/lib/Agent')\r\nimport db from './models/index'\r\n\r\nconst { BOT_TOKEN, PROXY_SOCKS5_HOST, PROXY_SOCKS5_PORT, PROXY_SOCKS5_USERNAME, PROXY_SOCKS5_PASSWORD, SECRET } = process.env\r\n// const socksAgent = new SocksAgent(`socks://${PROXY_SOCKS5_USERNAME}:${PROXY_SOCKS5_PASSWORD}@${PROXY_SOCKS5_HOST}:${PROXY_SOCKS5_PORT}`)\r\nconst socksAgent = new SocksAgent(`socks://${PROXY_SOCKS5_USERNAME}:${PROXY_SOCKS5_PASSWORD}@${SECRET}`)\r\n//     socksPort: parseInt(PROXY_SOCKS5_PORT),\r\n//     // If authorization is needed:\r\n//     socksUsername: PROXY_SOCKS5_USERNAME,\r\n//     socksPassword: PROXY_SOCKS5_PASSWORD\r\n// })\r\n\r\n// console.log(PROXY_SOCKS5_PASSWORD)\r\nlet bot = {}\r\n// let antidot = 10\r\n// let infected = 25\r\n// let deadline = '23:00'\r\nlet chatId = 293233794\r\n\r\n\r\n\r\nconst getStatus = async () => {\r\n    const settingsArray = await db.Setting.findAll()\r\n    let settings = {}\r\n    if(settingsArray) { \r\n        for (const setting of settingsArray) {\r\n            settings[setting.dataValues.parameter] = setting.dataValues.value\r\n        }\r\n    } else { \r\n        console.log(new Error(settings))\r\n    }\r\n    console.log(settings)\r\n    return settings\r\n}\r\n\r\nconst setWarn = async (newWarn) => {\r\n    console.log(`SET WARN: ${newWarn.hash} ${newWarn.value} ${newWarn.reason}`)\r\n    console.log(newWarn)\r\n    const options = {\r\n        fields: ['hash', 'value', 'reason', 'author'] \r\n    }\r\n\r\n    const immun = await db.Immun.findOne({ where: {\r\n        hash: newWarn.hash\r\n    }})\r\n    console.log(immun)\r\n    const iHash = immun.dataValues.hash\r\n    const warn = await db.Warn.create({\r\n        hash: iHash,\r\n        value: newWarn.value,\r\n        reason: newWarn.reason,\r\n        author: newWarn.author\r\n    }, options)\r\n    const warnData = {\r\n        hash: immun.dataValues.hash,\r\n        secondname: immun.dataValues.secondname,\r\n        firstname: immun.dataValues.firstname,\r\n        faculty: immun.dataValues.faculty,\r\n        value: warn.dataValues.value,\r\n        reason: warn.dataValues.reason\r\n    }\r\n    return warnData\r\n}\r\n\r\n// Нужно переопределить на уровне приложения!\r\nconst setParameter = async (newParameter, newValue) => {\r\n    console.log(`SETTING PARAMETERS: ${newParameter}: ${newValue}`)\r\n    const updatedSetting = await db.Setting.update({\r\n            parameter: newParameter,\r\n            value: newValue\r\n        }, {\r\n            where: {\r\n                parameter: newParameter\r\n            }\r\n        })\r\n    console.log(updatedSetting[0] == 1)\r\n    return updatedSetting[0] == 1 ? true : false\r\n}\r\n\r\n\r\ntry {\r\n    bot = new Telegraf(BOT_TOKEN, { agent: socksAgent })\r\n    bot.telegram.sendMessage(chatId, 'Я перезагрузился и теперь активен. Жду Ваших приказаний, сэр!')\r\n    console.log(`BOT IS ENABLED`)\r\n} catch(error) {\r\n    console.log(error)\r\n}\r\nbot.start((ctx) => ctx.reply('Привет!\\nЯ создан для обновления информации в профилях иммунов.\\n\\n/help - список команд'))\r\nbot.help((ctx) => ctx.reply('Команды:\\n/status для получения текущего положения дел в мире\\n/infected [%] - установить долю инфицированных\\n/antidot [%] - установить % готовности антидота\\n/timer [XX:XX] - установить время дедлайна'))\r\nbot.command(`/infected`, async (ctx) => {\r\n    console.log(ctx.message)\r\n    let message = ctx.message.text.split(' ')\r\n    if(message[1] != undefined) {\r\n        let updValue = await setParameter('infected', message[1])\r\n        ctx.reply(`Обновлено. Инфицированных: ${updValue}%`)\r\n    } else {\r\n        ctx.reply('Для обновления: /infected 54')\r\n    }\r\n})\r\nbot.command(`/antidot`, async (ctx) => {\r\n    console.log(ctx.message)\r\n    let message = ctx.message.text.split(' ')\r\n    if(message[1] != undefined) {\r\n        let updValue = await setParameter('infected', message[1])\r\n        ctx.reply(`Обновлено. Готовность антидота: ${updValue}%`)\r\n    } else {\r\n        ctx.reply('Для обновления: /antidot 54')\r\n    }\r\n})\r\nbot.command(`/timer`, async (ctx) => {\r\n    console.log(ctx.message)\r\n    let message = ctx.message.text.split(' ')\r\n    if(message[1] != undefined) {\r\n        let updValue = await setParameter('timer', message[1])\r\n        updValue ? ctx.reply(`Обновлено. Таймер до: ${updValue}`) : ctx.reply(`Что-то пошло не так :()`)\r\n    } else {\r\n        ctx.reply('Для обновления: /timer 23:00')\r\n    }\r\n})\r\nbot.command(`/warn`, async ctx => {\r\n    let message = ctx.message.text.split(' ')\r\n    console.log(ctx.from)\r\n    let warn = {\r\n        hash: message[1],\r\n        value: parseInt(message[2]),\r\n        author: ctx.from.username\r\n    }\r\n    message.shift()\r\n    message.shift()\r\n    message.shift()\r\n    warn.reason = message.join(' ')\r\n    // Внесение предупреждения в базу\r\n    const warnData = await setWarn(warn)\r\n    console.log(warnData)\r\n    ctx.reply(`Иммун ${warnData.hash} ${warnData.firstname} ${warnData.secondname} (${warnData.faculty}) получил снижение иммунитета на ${warn.value}% по причине: ${warn.reason}`)\r\n})\r\nbot.command(`/status`, async (ctx) => {\r\n    // const status = await getStatus()\r\n    // console.log(status)\r\n    const { antidot, infected, deadline } = await getStatus()\r\n    ctx.reply(`Прогресс разработки антидота: ${antidot}%\\nДоля зараженных: ${infected}%\\nВремя таймера: ${deadline}`)\r\n})\r\nbot.on('sticker', (ctx) => ctx.reply('👍'))\r\nbot.hears('Позя лучший!', (ctx) => ctx.reply('Да пошёл ты))'))\r\nbot.launch()\r\n\r\n\r\nmodule.exports = bot"]}