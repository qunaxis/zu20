{"version":3,"sources":["../../src/models/index.js"],"names":["fs","require","path","Sequelize","csv","FIRST_START","NODE_ENV","DATABASE_URL","process","env","domain","basename","__filename","csvPath","join","__dirname","db","sequelize","host","port","dialect","dialectOptions","ssl","error","console","authenticate","readdirSync","filter","file","indexOf","slice","forEach","model","name","Object","keys","modelName","associate","syncDb","sync","force","importCsv","data","csvOptions","delimiter","noheader","headers","fromFile","Error","genHash","length","charset","rng","prepareData","hashedData","item","hash","birth","Date","split","reverse","push","genQrs","urlData","url","qr","content","padding","width","height","color","background","ecl","save","id","secondname","firstname","saveUrlCsv","toDisk","importDataToDb","resultImmun","Immun","bulkCreate","fields","resultSettings","Setting","parameter","value","log","getStatus","settingsArray","findAll","settings","setting","dataValues","setWarn","newWarn","reason","options","immun","findOne","where","iHash","warn","Warn","create","author","warnData","faculty","setParameter","newParameter","newValue","updatedSetting","update","getImmunitet","immunHash","query","bind","result","rowCount","immunitet","csvData","preparedData","csvStatus","importedData","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["let fs        = require('fs')\r\nlet path      = require('path')\r\nlet Sequelize = require('sequelize')\r\nconst csv = require('csvtojson')\r\nimport { RandomHash } from 'random-hash'\r\nimport { randomBytes } from 'crypto'\r\nimport QRCode from 'qrcode-svg'\r\nimport ObjectsToCsv from 'objects-to-csv'\r\n\r\n\r\n\r\nconst { FIRST_START, NODE_ENV, DATABASE_URL } = process.env\r\nconst domain = `zu20.herokuapp.com`\r\nlet basename  = path.basename(__filename)\r\nconst csvPath = path.join(__dirname, '../../docs/users.csv')\r\n\r\n\r\nlet db = {}\r\nlet sequelize = {}\r\n\r\ntry {\r\n    if (NODE_ENV == 'production') {\r\n        sequelize = new Sequelize(DATABASE_URL)\r\n    } else {\r\n        sequelize = new Sequelize('d5teem0o06p85b', 'eoqhwdwukbgmrn', '5be8554312f708989cf69b4f001b6a7fc666321d8566d4d23c09e39034d8b6d3', {\r\n            host: 'ec2-46-51-190-87.eu-west-1.compute.amazonaws.com',\r\n            port: '5432',\r\n            dialect: 'postgres',\r\n            dialectOptions: {\r\n              ssl: true\r\n            }\r\n        })\r\n    }\r\n} catch(error) {\r\n    console.error(error)\r\n}\r\n\r\ntry {\r\n    sequelize.authenticate()\r\n} catch (error) {\r\n    console.error('Unable to connect to the database:', error)\r\n}\r\n\r\nfs\r\n\t.readdirSync(__dirname)\r\n\t.filter(file => {\r\n\t\treturn (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js')\r\n\t})\r\n\t.forEach(file => {\r\n\t\tlet model = sequelize['import'](path.join(__dirname, file))\r\n\t\tdb[model.name] = model\r\n    })\r\n\r\ndb.sequelize = sequelize\r\ndb.Sequelize = Sequelize\r\n\r\nObject.keys(db).forEach(modelName => {\r\n    if (db[modelName].associate) {\r\n        db[modelName].associate(db)\r\n    }\r\n})\r\n\r\nconst syncDb = async () => {\r\n    if (FIRST_START) {\r\n        await db.sequelize.sync({ force: true })\r\n    } else {\r\n        await db.sequelize.sync()\r\n    }\r\n}\r\n\r\n\r\nconst importCsv = async (csvPath) => {\r\n    let data = {}\r\n    const csvOptions = {\r\n        delimiter: ';',\r\n        noheader: true,\r\n        headers: [ 'id', 'secondname', 'firstname', 'patronymic', 'birth', 'faculty', 'group', 'phone', 'organization', 'hash', 'url' ]\r\n    }\r\n    try {\r\n        data = await csv(csvOptions).fromFile(csvPath)\r\n        return data\r\n    } catch (error) {\r\n        throw new Error(error)\r\n    }    \r\n}\r\n\r\nconst genHash = new RandomHash({\r\n    length: 6,\r\n    charset: 'ABCDEFGHKLMNPQRSTUVXYZ0123456789',\r\n    rng: randomBytes\r\n})\r\n\r\nconst prepareData = async (data) => {\r\n    let hashedData = []\r\n    for (let item of data) {\r\n        item.hash = genHash()\r\n        item.birth = new Date(item.birth.split('.').reverse().join('/'))\r\n        hashedData.push(item)\r\n    }\r\n    return hashedData\r\n}\r\n\r\nconst genQrs = async (data) => {\r\n    let urlData = []\r\n    for (let item of data) {\r\n        item.url = `${domain}/${item.hash}`\r\n        let qr = new QRCode({\r\n            content: item.url,\r\n            join: true,\r\n            padding: 4,\r\n            width: 256,\r\n            height: 256,\r\n            color: \"#000000\",\r\n            background: \"#ffffff\",\r\n            ecl: \"M\",\r\n          })\r\n        qr.save(path.join(__dirname, `../../docs/qrs/${item.id + ' ' + item.secondname + ' ' + item.firstname}.svg`))\r\n        \r\n        urlData.push(item)\r\n    }\r\n    return urlData\r\n}\r\n\r\nconst saveUrlCsv = async (urlData) => {\r\n    const csv = new ObjectsToCsv(urlData)\r\n    csv.toDisk(path.join(__dirname, `../../docs/hash.csv`))\r\n    return true  \r\n}\r\n\r\nconst importDataToDb = async (data) => {\r\n    let resultImmun = await db.Immun.bulkCreate(data, {\r\n        fields: ['secondname', 'firstname', 'patronymic', 'birth', 'faculty', 'group', 'phone', 'organization', 'hash']\r\n    })\r\n      // resultImmun ? console.log(\"IMMUNS DATA HAS BEEN IMPORTED\") : reject(new Error('ERROR IN IMMUNS DATA IMPORT'))\r\n    resultImmun ? resultImmun : new Error(resultImmun)\r\n    let resultSettings = await db.Setting.bulkCreate(\r\n        [\r\n            { parameter: 'infected', value: '0' },\r\n            { parameter: 'timer', value: '15:00' },\r\n            { parameter: 'antidot', value: '0' }\r\n        ], {\r\n            fields: ['parameter', 'value']\r\n        })\r\n    resultSettings ? console.log(\"SETTINGS DEFAULTS HAS BEEN SETTING\") : new Error(resultSettings)\r\n    return [resultImmun, resultSettings]\r\n}\r\n\r\ndb.getStatus = async () => {\r\n    const settingsArray = await db.Setting.findAll()\r\n    let settings = {}\r\n    if(settingsArray) { \r\n        for (const setting of settingsArray) {\r\n            settings[setting.dataValues.parameter] = setting.dataValues.value\r\n        }\r\n    } else { \r\n        console.log(new Error(settings))\r\n    }\r\n    console.log(settings)\r\n    return settings\r\n}\r\n\r\ndb.setWarn = async (newWarn) => {\r\n    console.log(`SET WARN: ${newWarn.hash} ${newWarn.value} ${newWarn.reason}`)\r\n    console.log(newWarn)\r\n    const options = {\r\n        fields: ['hash', 'value', 'reason', 'author'] \r\n    }\r\n\r\n    const immun = await db.Immun.findOne({ where: {\r\n        hash: newWarn.hash\r\n    }})\r\n    console.log(immun)\r\n    const iHash = immun.dataValues.hash\r\n    const warn = await db.Warn.create({\r\n        hash: iHash,\r\n        value: newWarn.value,\r\n        reason: newWarn.reason,\r\n        author: newWarn.author\r\n    }, options)\r\n    const warnData = {\r\n        hash: immun.dataValues.hash,\r\n        secondname: immun.dataValues.secondname,\r\n        firstname: immun.dataValues.firstname,\r\n        faculty: immun.dataValues.faculty,\r\n        value: warn.dataValues.value,\r\n        reason: warn.dataValues.reason\r\n    }\r\n    return warnData\r\n}\r\n\r\n// Нужно переопределить на уровне приложения!\r\ndb.setParameter = async (newParameter, newValue) => {\r\n    console.log(`SETTING PARAMETERS: ${newParameter}: ${newValue}`)\r\n    const updatedSetting = await db.Setting.update({\r\n            parameter: newParameter,\r\n            value: newValue\r\n        }, {\r\n            where: {\r\n                parameter: newParameter\r\n            }\r\n        })\r\n    console.log(updatedSetting[0] == 1)\r\n    return updatedSetting[0] == 1 ? true : false\r\n}\r\n\r\ndb.getImmunitet = async (immunHash) => {\r\n    // const immun = await db.Warn.findAll({\r\n    //     where: {\r\n    //         hash: immunHash\r\n    //     },\r\n    //     group: ['hash'],\r\n    //     attributes: [\r\n    //         'hash',\r\n    //         db.sequelize.fn('SUM', db.sequelize.col('value'))\r\n    //     ],\r\n    // })\r\n    const immun = await db.sequelize.query(`SELECT \"hash\", SUM(\"value\") as \"immunitet\" FROM \"Warns\" AS \"Warn\" WHERE \"Warn\".\"hash\" = $hash GROUP BY \"hash\"`, {\r\n        bind: {\r\n            hash: immunHash\r\n        }\r\n    })\r\n    console.log(immun)\r\n\r\n    let result = []\r\n    if (immun[1].rowCount > 0) { // Если варны есть\r\n        result = immun[0][0].immunitet\r\n    } else {\r\n        result = 100\r\n    }\r\n    return result\r\n}\r\n\r\n(async () => {\r\n    await syncDb()\r\n    if(FIRST_START) {\r\n        const csvData = await importCsv(csvPath)\r\n        // console.log(csvData)     /* --- GOOD --- */\r\n        const preparedData = await prepareData(csvData)\r\n        // console.log(preparedData) /* --- GOOD --- */\r\n        const urlData = await genQrs(preparedData)\r\n        // console.log(urlData)     /* --- GOOD --- */\r\n        const csvStatus = saveUrlCsv(urlData) \r\n        console.log(csvStatus)      /* --- GOOD --- */\r\n        const importedData = await importDataToDb(urlData)\r\n        // const status = await db.getStatus()\r\n        // console.log(status) /* --- GOOD --- */\r\n    }\r\n    // const warn = await db.setWarn({ \r\n        //     hash: '9T9Z2A',\r\n        //     value: 12,\r\n        //     reason: 'HUY',\r\n        //     author: 'qunaxis'\r\n        // })\r\n    // console.log(warn) /* --- GOOD --- */\r\n    // const set = await db.setParameter('timer', '22:00')\r\n    // const set = await db.setParameter('timer', '22:00')\r\n    // console.log(set) /* --- GOOD --- */\r\n\r\n\r\n    // console.log(importedData[0]) /* --- GOOD --- */\r\n    // console.log(importedData[1]) /* --- GOOD --- */\r\n})()\r\n\r\n\r\n\r\nmodule.exports = db\r\n"]}