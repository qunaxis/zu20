{"version":3,"sources":["../../src/models/settings.js"],"names":["module","exports","sequelize","DataTypes","Setting","define","id","type","INTEGER","primaryKey","defaultValue","autoIncrement","parameter","STRING","value"],"mappings":";;AAAA;;;;;;AAEAA,OAAOC,OAAP,GAAiB,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACzC,MAAIC,UAAUF,UAAUG,MAAV,CAAiB,SAAjB,EAA4B;AACxCC,QAAI,EAAEC,MAAM,oBAAUC,OAAlB,EAA2BC,YAAY,IAAvC,EAA6CC,cAAc,oBAAUF,OAArE,EAA8EG,eAAe,IAA7F,EADoC,EACiE;AACzGC,eAAW,oBAAUC,MAFmB;AAGxCC,WAAO,oBAAUD;AACjB;AACA;AACA;AACA;AAPwC,GAA5B,CAAd;AAUF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEE,SAAOT,OAAP;AACD,CAzCD","file":"settings.js","sourcesContent":["import Sequelize from 'sequelize'\r\n\r\nmodule.exports = (sequelize, DataTypes) => {\r\n  let Setting = sequelize.define('Setting', {\r\n    id: { type: Sequelize.INTEGER, primaryKey: true, defaultValue: Sequelize.INTEGER, autoIncrement: true }, // UUID или не UUID? Он ублюдский))\r\n    parameter: Sequelize.STRING,\r\n    value: Sequelize.STRING\r\n    // author: Sequelize.STRING\r\n    // antidot: Sequelize.STRING,\r\n    // infected: Sequelize.STRING,\r\n    // timer: Sequelize.STRING\r\n  }\r\n)\r\n// module.exports = (sequelize, DataTypes) => {\r\n//   let User = sequelize.define('User', {\r\n//     id: { type: Sequelize.UUID, primaryKey: true, defaultValue: Sequelize.UUIDV1 },\r\n//     number: { type: Sequelize.INTEGER, autoIncrement: true },\r\n//     firstname: Sequelize.STRING,\r\n//     secondname: Sequelize.STRING,\r\n//     patronymic:  { type: Sequelize.STRING, allowNull: true },\r\n//     passSerial: Sequelize.INTEGER,\r\n//     passNumber: Sequelize.INTEGER,\r\n//     birth: Sequelize.DATE,\r\n//     email: { type: Sequelize.STRING, allowNull: true },\r\n//     phoneMain: Sequelize.STRING,\r\n//     phoneAdditional: { type: Sequelize.STRING, allowNull: true },\r\n//     services:  { type: Sequelize.TEXT, allowNull: true },\r\n//     password: Sequelize.STRING,\r\n//     passwordConfirm: Sequelize.STRING,  \r\n//     userAgreement: { type: Sequelize.BOOLEAN, defaultValue: true },  \r\n//     dataProcessed: { type: Sequelize.BOOLEAN, defaultValue: true },\r\n//     offerAgreement: { type: Sequelize.BOOLEAN, defaultValue: true },  \r\n//     offerAgreement: { type: Sequelize.BOOLEAN, defaultValue: true },\r\n//     bitrixLeadId: { type: Sequelize.INTEGER, allowNull: true },\r\n//     bitrixContactId: { type: Sequelize.INTEGER, allowNull: true },  \r\n//   }\r\n// )\r\n\r\n//   User.associate = function(models) {\r\n//     models.User.hasMany(models.Task)\r\n//   }\r\n\r\n  return Setting\r\n}"]}